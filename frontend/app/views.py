# from .models import Texts 
# Imported almost everything , create your view accordingly , if anything missed kindly add it manually

import json
from unicodedata import category
from django.shortcuts import render, redirect
from django.http import HttpResponse , JsonResponse
from django.views.generic import ListView
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.models import User          # get all the users  in ur account 
from django.core.paginator import Paginator
from rest_framework.decorators import api_view , permission_classes
from rest_framework.response import Response
from rest_framework. parsers import JSONParser
from rest_framework.views import APIView
from rest_framework.permissions import IsAuthenticated
from rest_framework.authtoken.models import Token             # just like User table we import the Token table 
from rest_framework.generics import ListAPIView
from .forms import UserRegisterForm, UserUpdateForm, TaskForm
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from .models import Articles
import random


@api_view(['POST'])                         # login portal 
def login (request):
    '''
    Step 1 > POST http://127.0.0.1:8000/login/  in json body , send username and password {"username": "vitor", "password": "test@123"}
             and get a token in response  {"message": "Login successful vitor ", "token": "e8e93f7a21a4e45c67527d644a69e3e4fc296721"}
    Step 2 > GET  http://127.0.0.1:8000/      call the views function and pass the token in header as Authorization : Token <token>

    Now  when u login with user who has been added by superuser, his token can be generated in 3 ways 
    | now wherever IsAuthenticated class is used ,
    | u can use token authentication which can be generated by auth token  by this function login
    | IF You are in thunder client >  go to bearer > token prefix = Token > Bearer token = token 
    | and now hit the request , it will work 

     Second way to login > http://127.0.0.1:8000/api-obtain-auth/  in json body , send username and password {"username": "vitor", "password": "test@123"}
    '''
    if request.method == 'POST':
        data = JSONParser().parse(request)
        username =data['username']
        password = data['password']
        user = User.objects.get(username=username)
        if user.check_password(password):
            token, obj=Token.objects.get_or_create(user=user)       
            print(token , obj)
            return Response({'message':f'Login successful {username} ','token':token.key})
        else:
            return Response({'message':'Login unsuccessful'})

        
@api_view(['GET','POST','DELETE','PUT'])               # CRUD operations on Texts table      
def base(request,pk=None):
        return render(request, 'home.html')

def registerView(request):
    form = UserRegisterForm()
    if request.method == "POST":
        form = UserRegisterForm(request.POST or None)
        if form.is_valid():
            form.save()
            username = form.cleaned_data.get('username')
            messages.success(request, f'Your Account has been Successfully created {username}!')
            return redirect('login')
    return render(request, 'register.html', {'form': form})


@login_required
def profile(request):
    form = UserUpdateForm(instance=request.user)
    username = request.user.username
    email =  request.user.email
    print('Username is ',username, ' Email is ',email if email else 'No Email provided')
    if request.method == "POST":
        form = UserUpdateForm(request.POST or None, instance=request.user)
        if form.is_valid():
            form.save()
            messages.success(request, f'Your Account has been Successfully updated {username}!')
            return redirect('profile')
    return render(request, 'profile.html',
    {'form': form, 'username': username, 'email': email  }) 

not_required = []
@login_required
def posts(request,pk=None):
    form = TaskForm()
    print('pk is ',pk)
    all_articles = Articles.objects.all()
    if pk:
        get_category = Articles.objects.get(id=pk).category
        articles_not_required = Articles.objects.filter(category=get_category)
        for article in articles_not_required:
            not_required.append(article.id)

        articles_required = Articles.objects.exclude(id__in=not_required)

        # print(' Articles ids not required are ',not_required)
        # order by ids which are not required at the end of the list > [i.id for i in articles_required] + not_required
       
        all_articles = Articles.objects.filter\
        (id__in = [i.id for i in articles_required] \
        + random.sample(not_required, 1) ).order_by('-id')


        messages.success(request, f'We have Got your response, \
            we will do the redundancy\
            for these articles ')
    paginator = Paginator(all_articles, 5)   # limit the data by 5 per page
    page_number = request.GET.get('page')   # get the page number from the url
    page_obj = paginator.get_page(page_number)
    total_pages = paginator.num_pages
    # import pdb; pdb.set_trace()
    if request.method == "POST":
        form = TaskForm(request.POST or None)
        if form.is_valid():
            form.save()
            messages.success(request, f'Your Task has been Successfully created!')
            return redirect('posts')
    return render(request, 'posts.html', {'form': form,'all_articles':page_obj,
    'totalList':[n+1 for n in range(total_pages)]    ,'lastpage':total_pages})

@login_required
def update(request, pk):
    task = Articles.objects.get(id=pk)

    form = TaskForm(instance=task)

    if request.method == 'POST':
        form = TaskForm(request.POST, instance=task)
        if form.is_valid():
            form.save()
        return redirect('posts')

    context = {
        'form' : form
    }
    return render(request, 'update.html', context)

    
def delete(request, pk):
    item = Articles.objects.get(id=pk)

    if request.method == 'POST':
        item.delete()
        return redirect('posts')

    context = {
        'item':item
    }
    return render(request, 'delete.html', context)
