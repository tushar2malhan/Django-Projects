
from xml.sax.handler import all_properties
from .models import RealEstate 

from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.models import User          # get all the users  in ur account 
from django.contrib import messages
from django.views.generic import ListView
from rest_framework.decorators import api_view , permission_classes
from rest_framework.response import Response
from rest_framework.authtoken.models import Token             # just like User table we import the Token table 
from rest_framework. parsers import JSONParser

all_properties = RealEstate.objects.all()
all_fields =  [ 
({
    "id": i['json']['id'],
    "city": i['json'].get('property').get('address').get('city'),
    "located state": i['json'].get('property').get('address').get('state'),
    "price" :i.get('json').get('price') ,
    "state" :i.get('json').get('state') ,
    "Number of Bedrooms" :i.get('json').get('property').get('numberBedrooms') ,
    "Number of Bathrooms" :i.get('json').get('property').get('numberBaths') ,
    "squareFeet" :i.get('json').get('property').get('squareFeet') ,
    "propertyType" :i.get('json').get('property').get('propertyType') ,
})       for  i in all_properties.values('json')] 

def discounted_fields(state,discounted_price):
    field =  [
    ({
        "id": i['json']['id'],
        "city": i['json'].get('property').get('address').get('city'),
        "located state": i['json'].get('property').get('address').get('state'),
        "Actual price" :i.get('json').get('price') ,
        "Discounted price":int(i.get('json').get('price') * discounted_price),
        "state" :i.get('json').get('state') ,
        "Number of Bedrooms" :i.get('json').get('property').get('numberBedrooms') ,
        "Number of Bathrooms" :i.get('json').get('property').get('numberBaths') ,
        "squareFeet" :i.get('json').get('property').get('squareFeet') ,
        "propertyType" :i.get('json').get('property').get('propertyType') ,
    })       for  i in all_properties.values('json') if i.get('json').get('state')==state]
    return field


@api_view(['POST'])                         # login portal 
def login (request):
    """
    Step 1 > POST http://127.0.0.1:8000/login/  in json body , send username and password {"username": "tushar", "password": "test@123"}
                and get a token in response  {"message": "Login successful tushar ", "token": "e8e93f7a21a4e45c67527d644a69e3e4fc296721"}
    Step 2 > GET  http://127.0.0.1:8000/      call the views function and pass the token in header as Authorization : Token <token>

    Now  when u login with user who has been added by superuser, his token can be generated in 3 ways 
    | now wherever IsAuthenticated class is used ,
    | u can use token authentication which can be generated by auth token  by this function login
    | IF You are in thunder client >  go to bearer > token prefix = Token > Bearer token = token 
    | and now hit the request , it will work 

        Second way to login > http://127.0.0.1:8000/api-obtain-auth/  in json body , send username and password {"username": "vitor", "password": "test@123"}
    """
    if request.method == 'POST':
        data = JSONParser().parse(request)
        username =data['username']
        password = data['password']
        user = User.objects.get(username=username)
        if user.check_password(password):
            token, obj=Token.objects.get_or_create(user=user)       
            print(token , obj)
            messages.success(request, f'Your Account has been Successfully created !')
            return Response({'message':f'Login successful {username} ','token':token.key})
        else:
            return Response({'message':'Login unsuccessful'})



@api_view(['GET'])                         
def view_homes(request,value=None):
    '''
    View all homes from default path "/" --> http://127.0.0.1:8000/
    Search homes from Particular feature path "/" --> http://127.0.0.1:8000/search/<str:value>
    '''
    return Response([{"id":i.get('id'),value:i.get(value,'HOME')} for i in all_fields] )if value else Response(all_fields)
 

@api_view(['POST'])
def sell_home(request):
    if request.method == 'POST':
        data = JSONParser().parse(request)
        if data:
            if data['id'] in [i.get('id') for i in all_fields]:
                return Response({'message':'ID already exists'})
            data['state']= 'PreSale'
            RealEstate.objects.create(json=data)
            return Response({'message':'Property Successfully added'})
        else:
            return Response({'message':'Property  not  added successfully'})


@api_view(['GET'])
def get_offers(request):
    return Response(discounted_fields('PreSale',0.8))


@api_view(['GET'])
def offers_for_sold_home(request):
    return Response(discounted_fields('Sold',0.5))
